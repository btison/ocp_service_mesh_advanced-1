---

- shell: |
    {{ openshift_cli }} get deployment kiali-operator -o template --template={{ replica_status }} -n {{ ocp_project }}
  register: resource_status
  ignore_errors: true

- block:

  - name: get default channel for kiali operator
    shell: |-
      oc get packagemanifests {{ kiali_operator_package_name }} -o jsonpath='{.status.defaultChannel}'
    register: kiali_defaultchannel

  - name: get currentCSV for default channel
    shell: |-
      oc get packagemanifests {{ kiali_operator_package_name }} -o jsonpath='{.status.channels[?(@.name == "{{ kiali_defaultchannel.stdout }}")].currentCSV}'
    register: kiali_currentCSV

  - name: "copy {{ resources_base_dir }}/kiali/subscription.yml"
    template:
      src: "{{ resources_base_dir }}/kiali/subscription.yml"
      dest: "{{ work_dir }}/kiali-subscription.yml"
    vars:
      kiali_operator_channel: "{{ kiali_defaultchannel.stdout }}"
      kiali_operator_startingcsv: "{{ kiali_currentCSV.stdout }}" 

  - name: "Create operatorgroups in {{ ocp_project }}"
    k8s:
      state: present
      namespace: "{{ ocp_project }}"
      src: "{{ resources_base_dir }}/operatorgroup/operatorgroup.yml"

  - name: "Create kiali subscription"
    k8s:
      state: present
      namespace: "{{ kiali_operator_namespace }}"
      src: "{{ work_dir }}/kiali-subscription.yml"

  - name: "Wait until kiali operator is active"
    shell: "oc get deployment kiali-operator -o template --template={{ json_template }} -n {{ ocp_project }}"
    vars:
      json_template: '\{\{.status.readyReplicas\}\}'
    register: result
    until: result.stdout == "1"
    retries: 30
    delay: 10
    changed_when: false

  when: >
    resource_status.stdout is not defined or
    resource_status.stdout is none or
    resource_status.stdout != "1"
