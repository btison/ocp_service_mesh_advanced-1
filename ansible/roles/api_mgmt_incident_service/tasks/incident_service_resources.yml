---

- set_fact:
    tenant_admin_url: "user{{ item }}-{{ API_MANAGER_NS }}-admin.apps.{{ api_mgmt_subdomain_base }}"
    response_dir: "{{ work_dir }}/{{ api_service_name }}"
    private_base_url: "http://user{{ item }}-{{ api_service_name }}.user{{ item }}-er-demo:8080"
    public_stage_url: "https://user{{ item }}-{{ API_MANAGER_NS }}-stage-generic.apps.{{ api_mgmt_subdomain_base }}:443"
    public_prod_url: "https://user{{ item }}-{{ API_MANAGER_NS }}-prod-generic.apps.{{ api_mgmt_subdomain_base }}:443"

- name: "{{ item }} create {{ response_dir }}"
  file:
    path: "{{ response_dir }}"
    state: directory

- shell:
    oc get secret apicast-configuration-url-secret-stage -n user{{ item }}-3scale-gw -o template --template={{ json_template }} | base64 -d | cut -d'@' -f1 | cut -d'/' -f3
  vars:
    json_template: '\{\{.data.AdminPortalURL\}\}'
  register: tenant_access_token

- debug:
    var: tenant_access_token

- set_fact:
    output_file: "{{ item }}_list_services.xml"

- name: "{{ item }} 1)  list api resources;  https://{{ tenant_admin_url }}?access_token={{ tenant_access_token.stdout }}"
  uri: 
    url: "https://{{ tenant_admin_url }}/admin/api/services.xml"
    method: GET
    timeout: 5
    status_code: 200
    return_content: yes
    validate_certs: no
    force_basic_auth: yes
    user: "{{ tenant_access_token.stdout }}"
    password: ""
  register: list_services

- name: "{{ item }}  2) copy response to {{ response_dir }}/{{ output_file }}"
  copy:
    content: "{{ list_services.content }}"
    dest: "{{ response_dir }}/{{ output_file }}"

- name: "{{ item }} 3) Pick out the service ID of the default api service"
  xml:
    path: "{{ response_dir }}/{{ output_file }}"
    xpath: //services/service[name='API']/id
    content: text
  register: check_default_api 
  ignore_errors: True


- set_fact:
    output_file: "{{ item }}_create_service_response.xml"

- name: "{{ item }} 4) create {{ api_service_name }} API in 3scale"
  uri: 
    url: "https://{{ tenant_admin_url }}/admin/api/services.xml"
    body: "name={{ api_service_name }}"
    method: POST
    timeout: 5
    return_content: yes
    validate_certs: no
    force_basic_auth: yes
    user: "{{ tenant_access_token.stdout }}"
    password: ""

    # status_code:  HTTP Error 422: Unprocessable Entity :  System name has already been taken
    status_code: 201, 422

  register: create_service_response

- name: "{{ item }}  5) copy response to {{ response_dir }}/{{ output_file }}"
  copy:
    content: "{{ create_service_response.content }}"
    dest: "{{ response_dir }}/{{ output_file }}"
  when: create_service_response.status == 201

- name: "{{ item }} 6) Pick out the service ID of the new {{ api_service_name }}"
  xml:
    path: "{{ response_dir }}/{{ output_file }}"
    xpath: //service/id
    content: text
  register: serviceId

- name: "{{ item }} 7) create {{ api_service_name }}_app_plan for serviceId = {{ serviceId.matches[0].id }}"
  uri: 
    url: "https://{{ tenant_admin_url }}/admin/api/services/{{ serviceId.matches[0].id }}/application_plans.xml"
    body: "name={{ api_service_name }}_app_plan&state_event=publish"
    method: POST
    timeout: 5
    return_content: yes
    validate_certs: no
    force_basic_auth: yes
    user: "{{ tenant_access_token.stdout }}"
    password: ""

    # status_code:  HTTP Error 422: Unprocessable Entity :  System name has already been taken
    status_code: 201, 422

  register: create_app_plan

- set_fact:
    output_file: "{{ item }}_create_app_plan_response.xml"

- name: "{{ item }}  8) copy response to {{ response_dir }}/{{ output_file }}"
  copy:
    content: "{{ create_app_plan.content }}"
    dest: "{{ response_dir }}/{{ output_file }}"
  when: create_app_plan.status == 201

- name: "{{ item }} 9) Pick out the app plan ID of the new {{ api_service_name }}"
  xml:
    path: "{{ response_dir }}/{{ output_file }}"
    xpath: //plan/id
    content: text
  register: appPlanId

- name: "{{ item }} 10) update service_proxy for serviceId = {{ serviceId.matches[0].id }}"
  uri: 
    url: "https://{{ tenant_admin_url }}/admin/api/services/{{ serviceId.matches[0].id }}/proxy.xml"
    body: "api_backend={{ private_base_url }}&endpoint={{ public_prod_url }}&sandbox_endpoint={{ public_stage_url }}"
    method: PATCH
    timeout: 5
    return_content: yes
    validate_certs: no
    force_basic_auth: yes
    user: "{{ tenant_access_token.stdout }}"
    password: ""
    status_code: 200
  register: update_proxy

- set_fact:
    output_file: "{{ item }}_proxy_config.json"

- name: "{{ item }} 11) Determine the ID of the sandbox environment proxy_config"
  uri:
    url: "https://{{ tenant_admin_url }}/admin/api/services/{{ serviceId.matches[0].id }}/proxy/configs/sandbox.json"
    method: GET
    timeout: 5
    return_content: yes
    validate_certs: no
    status_code: 200
    force_basic_auth: yes
    user: "{{ tenant_access_token.stdout }}"
    password: ""    
  register: proxy_config

- name: "{{ item }}  12) copy response to {{ response_dir }}/{{ output_file }}"
  copy:
    content: "{{ proxy_config.content }}"
    dest: "{{ response_dir }}/{{ output_file }}"
  when: proxy_config.status == 200

- name: "{{ item }} 13) Pick out the proxy_config id"
  set_fact:
    proxy_config_version: "{{ (proxy_config.content | from_json).proxy_configs[-1].proxy_config.version }}"
  
- name: "{{ item }} 14) Promote the sandbox environment to a production environment; {{ proxy_config_version }}"
  uri:
    url: "https://{{ tenant_admin_url }}/admin/api/services/{{ serviceId.matches[0].id }}/proxy/configs/sandbox/{{ proxy_config_version }}/promote.json"
    body: "to=production"
    method: POST
    timeout: 5
    return_content: yes
    validate_certs: no
    force_basic_auth: yes
    user: "{{ tenant_access_token.stdout }}"
    password: ""

    # 422: version has already been taken
    status_code: 201, 422

- block:
  - set_fact:
      defaultServiceId: "{{ check_default_api.matches[0].id }}"

  - name: "{{ item }} 5) Delete default service API {{ defaultServiceId }}"
    uri: 
      url: "https://{{ tenant_admin_url }}/admin/api/services/{{ defaultServiceId }}.xml"
      method: DELETE
      timeout: 5
      return_content: yes
      validate_certs: no
      force_basic_auth: yes
      user: "{{ tenant_access_token.stdout }}"
      password: ""
      status_code: 200
  when: >
    check_default_api is not failed
